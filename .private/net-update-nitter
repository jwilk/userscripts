#!/usr/bin/env perl

# Copyright Â© 2022 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

no lib '.';  # CVE-2016-1238

use autodie;
use strict;
use warnings;
use v5.14;

use English qw(-no_match_vars);
use FindBin ();
use HTTP::Tiny ();

sub urlget
{
    my ($url) = @_;
    state $http = HTTP::Tiny->new;
    my $response = $http->get($url);
    if (not $response->{success}) {
        if ($response->{status} == 599) {
            die "<$url>: $response->{content}";
        } else {
            die "<$url>: $response->{status} $response->{reason}";
        }
    }
    return $response->{content};
}

sub slurp
{
    my ($path) = @_;
    local $RS = undef;
    open my $fh, '<', $path;
    $_ = <$fh>;
    close $fh;
    return $_;
}

chdir "$FindBin::Bin/..";

my $wiki_url = 'https://raw.githubusercontent.com/wiki/zedeus/nitter/Instances.md';
my $wiki = urlget($wiki_url);

$wiki =~ s/.*\n## Public\n//s;
$wiki =~ s/\n\K#.*//s;
my %hosts;
while ($wiki =~ m{^[|] \[([\w.]+)\][(]([\w:./]+)[)]}mg) {
    my $host = $1;
    my $url = $2;
    $url =~ m{\Ahttps://\Q$host\E/?\z}
        or die "Instances.md: bad line for host $host";
    if (defined $hosts{host}) {
        die "Instances.md: duplicate host $host"
    };
    $hosts{$host} = 1;
}
$hosts{'nitter.snopyta.org'} = 1;

for my $path (glob '*') {
    my $target = eval { readlink $path }
        or next;
    $target eq 'nitter.net'
        or next;
    unlink $path;
}

for my $host (keys %hosts) {
    symlink 'nitter.net', $host;
}

my $css_path = 'nitter.net/nitter.css';
my $css = slurp($css_path);
my $css_domains = '';
for my $host (sort keys %hosts) {
    $css_domains .= "    domain($host),\n";
}
$css =~ s/^[@]-moz-document\n\K.*\n(?=\Q    domain(nitter.net)\E\n)/$css_domains/ms
    or die;
open my $fh, '>', $css_path;
print {$fh} $css
    or die $ERRNO;
close $fh;

# vim:ts=4 sts=4 sw=4 et
